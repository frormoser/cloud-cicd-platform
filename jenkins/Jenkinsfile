pipeline {
    agent any

    environment {
        // AWS credentials must be configured in Jenkins credentials store
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID     = '123456789012'   // Replace with your AWS account ID
        ECR_REPO_NAME      = 'cloud-cicd-platform'
        IMAGE_TAG          = "build-${env.BUILD_NUMBER}"
    }

    options {
        timestamps()              // Add timestamps to console output
        disableConcurrentBuilds() // Prevent concurrent builds on same pipeline
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    sh """
                        docker build -t ${ECR_REPO_NAME}:${IMAGE_TAG} ./app
                    """
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    echo "Logging into Amazon ECR..."
                    sh """
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                        docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Tagging and pushing Docker image to ECR..."
                    sh """
                        docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "Deploying application to Kubernetes..."
                    sh """
                        kubectl set image deployment/myapp-deployment myapp-container=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG} --record
                        kubectl rollout status deployment/myapp-deployment
                    """
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully.'
        }
        failure {
            echo '‚ùå Pipeline failed. Please check the logs.'
        }
        always {
            echo 'üßπ Cleaning workspace and Docker cache...'
            cleanWs() 
            sh 'docker system prune -af || true'
        }
    }
}
