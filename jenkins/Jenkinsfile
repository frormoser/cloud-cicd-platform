pipeline {
    agent any

    environment {
        // === Global Environment Variables ===
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID     = '123456789012'   // Replace with your AWS account ID
        ECR_REPO_NAME      = 'cloud-cicd-platform'
        IMAGE_TAG          = "build-${env.BUILD_NUMBER}"
        K8S_DEPLOYMENT     = "myapp-deployment"
        K8S_CONTAINER      = "myapp-container"
        SLACK_CHANNEL      = "#cicd-alerts"
    }

    options {
        timestamps()              // Add timestamps to Jenkins console output
        disableConcurrentBuilds() // Prevent concurrent builds on the same pipeline
        buildDiscarder(logRotator(numToKeepStr: '10')) // Keep last 10 builds
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'üì• Cloning repository...'
                checkout scm
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    echo "üß™ Running unit tests..."
                    sh """
                        cd app
                        pytest --maxfail=1 --disable-warnings -q
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "üê≥ Building Docker image..."
                    sh """
                        docker build -t ${ECR_REPO_NAME}:${IMAGE_TAG} ./app
                    """
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    echo "üîê Logging into Amazon ECR..."
                    sh """
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                        docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "üöÄ Tagging and pushing Docker image to ECR..."
                    sh """
                        docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "üì¶ Deploying application to Kubernetes..."
                    try {
                        // Option A: simple `kubectl set image` if you already have a Deployment
                        sh """
                            kubectl set image deployment/${K8S_DEPLOYMENT} ${K8S_CONTAINER}=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG} --record
                            kubectl rollout status deployment/${K8S_DEPLOYMENT} --timeout=120s
                        """
                        // Option B: (recommended) Deploy via Helm for declarative deployments.
                        // Uncomment and adjust the next block to perform a Helm upgrade/install
                        // using the provided chart in `helm/myapp`.
                        //
                        // withCredentials([string(credentialsId: 'EKS_KUBECONFIG', variable: 'KUBECONFIG_CONTENT')]) {
                        //   sh 'echo "$KUBECONFIG_CONTENT" > kubeconfig && export KUBECONFIG=$PWD/kubeconfig'
                        //   sh "helm upgrade --install ${ECR_REPO_NAME} helm/myapp --set image.repository=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME},image.tag=${IMAGE_TAG}"
                        // }
                        echo "‚úÖ Deployment succeeded!"
                    } catch (err) {
                        echo "‚ùå Deployment failed! Rolling back..."
                        sh "kubectl rollout undo deployment/${K8S_DEPLOYMENT}"
                        error("Deployment failed and was rolled back.")
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully.'
            slackSend(channel: "${SLACK_CHANNEL}", message: "‚úÖ Build #${env.BUILD_NUMBER} succeeded!", color: 'good')
            mail to: 'devops-team@example.com',
                 subject: "‚úÖ Jenkins Build Success: #${env.BUILD_NUMBER}",
                 body: "The Jenkins pipeline completed successfully.\nProject: ${ECR_REPO_NAME}\nBuild: #${env.BUILD_NUMBER}\n"
        }
        failure {
            echo '‚ùå Pipeline failed. Please check the logs.'
            slackSend(channel: "${SLACK_CHANNEL}", message: "‚ùå Build #${env.BUILD_NUMBER} failed!", color: 'danger')
            mail to: 'devops-team@example.com',
                 subject: "‚ùå Jenkins Build Failed: #${env.BUILD_NUMBER}",
                 body: "The Jenkins pipeline failed.\nProject: ${ECR_REPO_NAME}\nBuild: #${env.BUILD_NUMBER}\nPlease check Jenkins logs."
        }
        always {
            echo 'üßπ Cleaning workspace and Docker cache...'
            cleanWs()
            sh 'docker system prune -af || true'
        }
    }
}
